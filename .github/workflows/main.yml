# This workflow will build a Python project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python

on: [push]

jobs:

  test_dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11' 
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  lint_code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11' 
      - name: Lint code with flake8
        run: |
          pip install flake8
          echo "Running flake8 on repo"
          flake8 -v

      # TODO: it would be nice to have the project published on Pypi for easy installation via pip:
      #- name: Publish package
      #  uses: pypa/gh-action-pypi-publish@release/v1
      #  with:
      #    password: ${{ secrets.PYPI_API_TOKEN }}

  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11' 
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - name: Run tests
        run: |
          pytest
      
  build_docker_dependabot:
    runs-on: ubuntu-latest
    # see https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions#accessing-secrets
    # for the reason why DependaBot pull requests have no access to secrets like ${{ secrets.PAT_TOKEN_FOR_GITHUB }};
    # this lack of access forces us not to push images when dependabot runs
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4

      - name: Metadata extraction
        id: meta
        uses: docker/metadata-action@v5
      - run: |
          echo "Docker image will be versioned as: ${{ steps.meta.outputs.version }}"

      - name: Build Docker image (no push)
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          # options related to BUILDing the docker image:
          dockerfile: ./Dockerfile
          multiPlatform: true
          platform: linux/amd64,linux/arm64,linux/arm/v7
          image: psmqtt
          # options related to PUSHing the docker image:
          registry: ghcr.io
          pushImage: false


  build_docker_nonroot_variant:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4

      - name: Metadata extraction
        id: meta
        uses: docker/metadata-action@v5
      - run: |
          echo "Docker image will be versioned as: ${{ steps.meta.outputs.version }}"

      - name: Build and push Docker image [non-root]
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          # options related to BUILDing the docker image:
          dockerfile: ./Dockerfile
          multiPlatform: true
          platform: linux/amd64,linux/arm64,linux/arm/v7
          image: psmqtt
          tags: ${{ steps.meta.outputs.version }}
          addLatest: true
          # options related to PUSHing the docker image:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN_FOR_GITHUB }}
          pushImage: true

  build_docker_root_variant:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4

      - name: Metadata extraction
        id: meta
        uses: docker/metadata-action@v5
      - run: |
          echo "Docker image will be versioned as: ${{ steps.meta.outputs.version }}-root"

      - name: Build and push Docker image [root]
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          # options related to BUILDing the docker image:
          dockerfile: ./Dockerfile
          multiPlatform: true
          platform: linux/amd64,linux/arm64,linux/arm/v7
          image: psmqtt
          buildArgs: USERNAME=root
          tags: ${{ steps.meta.outputs.version }}-root,latest-root
          addLatest: false
          # options related to PUSHing the docker image:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN_FOR_GITHUB }}
