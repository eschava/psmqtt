# This workflow will build a Python project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: tests-and-build

on: [push]

jobs:

  test_dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13' 
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  lint_code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13' 
      - name: Lint code with flake8
        run: |
          pip install flake8
          echo "Running flake8 on repo"
          flake8 -v

      # TODO: it would be nice to have the project published on Pypi for easy installation via pip:
      #- name: Publish package
      #  uses: pypa/gh-action-pypi-publish@release/v1
      #  with:
      #    password: ${{ secrets.PYPI_API_TOKEN }}

  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13' 
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - name: Run tests
        run: |
          pytest -vvv --log-level=INFO -m unit
      
  integration_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13' 
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Build docker image for integration tests
        run: docker build -t psmqtt:latest .

      - name: Run tests
        run: |
          pytest -vvvv --log-level=INFO -s -m integration

  build_docker_dependabot:
    runs-on: ubuntu-latest
    needs: [test_dependencies,lint_code,unit_tests,integration_tests]
    # see https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions#accessing-secrets
    # for the reason why DependaBot pull requests have no access to secrets like ${{ secrets.PAT_TOKEN_FOR_GITHUB }};
    # this lack of access forces us not to push images when dependabot runs
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4

      - name: Metadata extraction
        id: meta
        uses: docker/metadata-action@v5
      - run: |
          echo "Docker image will be versioned as: ${{ steps.meta.outputs.version }}"

      - name: Build Docker image (no push)
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          # options related to BUILDing the docker image:
          dockerfile: ./Dockerfile
          multiPlatform: true
          platform: linux/amd64,linux/arm64,linux/arm/v7
          image: psmqtt
          tags: ${{ steps.meta.outputs.version }}
          addLatest: false
          # options related to PUSHing the docker image:
          registry: ghcr.io
          pushImage: false


  build_docker_nonroot_variant:
    runs-on: ubuntu-latest
    needs: [test_dependencies,lint_code,unit_tests,integration_tests]
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4

      - name: Metadata extraction
        id: meta
        uses: docker/metadata-action@v5
      - name: Decorate docker image version
        id: docker_version
        run: |
          ver=${{ steps.meta.outputs.version }}
          # Add the 'latest' tag only to tag builds
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=$ver,latest" >> $GITHUB_OUTPUT
          else
            #if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            #  echo "version=$ver,latest" >> $GITHUB_OUTPUT
            #fi
            echo "version=$ver" >> $GITHUB_OUTPUT
          fi
      - run: |
          echo "Docker image will be versioned as: ${{ steps.docker_version.outputs.version }}"

      - name: Build and push Docker image [non-root]
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          # options related to BUILDing the docker image:
          dockerfile: ./Dockerfile
          multiPlatform: true
          platform: linux/amd64,linux/arm64,linux/arm/v7
          image: psmqtt
          tags: ${{ steps.docker_version.outputs.version }}
          addLatest: false
          # options related to PUSHing the docker image:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN_FOR_GITHUB }}
          pushImage: true

  build_docker_root_variant:
    runs-on: ubuntu-latest
    needs: [test_dependencies,lint_code,unit_tests,integration_tests]
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4

      - name: Metadata extraction
        id: meta
        uses: docker/metadata-action@v5
      - name: Decorate docker image version
        id: docker_version
        run: |
          ver=${{ steps.meta.outputs.version }}
          # Add the 'latest' tag only to tag builds
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${ver}-root,latest-root" >> $GITHUB_OUTPUT
          else
            #if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            #  echo "version=$ver,latest" >> $GITHUB_OUTPUT
            #fi
            echo "version=${ver}-root" >> $GITHUB_OUTPUT
          fi
      - run: |
          echo "Docker image will be versioned as: ${{ steps.docker_version.outputs.version }}"

      - name: Build and push Docker image [root]
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          # options related to BUILDing the docker image:
          dockerfile: ./Dockerfile
          multiPlatform: true
          platform: linux/amd64,linux/arm64,linux/arm/v7
          image: psmqtt
          buildArgs: USERNAME=root
          tags: ${{ steps.docker_version.outputs.version }}
          addLatest: false
          # options related to PUSHing the docker image:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN_FOR_GITHUB }}
          pushImage: true

