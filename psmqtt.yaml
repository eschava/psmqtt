#
# PSMQTT configuration file
# All values shown here are the default values
#

logging:
  level: DEBUG

  # psmqtt will report its own status (e.g. number of errors) every N seconds on its log output
  # and on the specific '<mqtt.publish_topic_prefix>/status' topic
  report_status_period_sec: 10

mqtt:
  # broker: details about the MQTT broker
  broker:
    host: localhost
    port: 1883
    #username:
    #password:
  
  # client_id: the identifier of the MQTT client created by psmqtt; this is useful to identify psmqtt
  # when inspecting the MQTT broker logs
  clientid: psmqtt
  
  # clean_session: If "true", the broker will remove all information about this client when it disconnects. 
  # If "false", the client is a persistent client and subscription information and queued messages will 
  # be retained when the client disconnects
  clean_session: false
  
  # qos: it can be:
  #  - At most once (QoS 0)
  #  - At least once (QoS 1)
  #  - Exactly once (QoS 2)
  # see https://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels/
  qos: 0
  
  # retain: if set to true, the message will be set as the "last known good"/retained message for 
  # each topic populated by psmqtt
  retain: false

  # reconnect_period_sec: defines how frequently psmqtt will re-attempt a connection to the MQTT broker
  # if the connection is lost. You should be setting this parameter to the smallest value that makes sense
  # according to your PSMQTT scheduling rules.
  reconnect_period_sec: 5

  # request: name of the topic that psmqtt will subscribe to, and where it will wait for information requests;
  # to activate the request just send any payload message (e.g. "REQUEST") to a topic like:
  # <psmqtt/COMPUTER_NAME/request/cpu_percent>. 
  request_topic: "psmqtt/request/"

  # publish_topic_prefix: defines the prefix for all published topics;
  # if not provided, it defaults to "psmqtt/<hostname>/"
  #publish_topic_prefix: 

  ha_discovery:
    # ha_discovery.enabled: if set to true, psmqtt will publish a "homeassistant" MQTT discovery topic
    # for each task having the 'ha_discovery' configuration parameters set.
    # This will enable HomeAssistant to immediately recognize as sensors the information published by psmqtt
    # (see https://www.home-assistant.io/integrations/sensor.mqtt/)
    enabled: true

    # ha_discovery.topic: defines the topic that psmqtt will publish its "homeassistant" MQTT discovery topics;
    topic: homeassistant

    # ha_discovery.device_name: the name of the device grouping all sensors published to HomeAssistant;
    # it defaults to the <hostname> of the computer
    #device_name: 
    
options:
  # exit_after_num_tasks: this configuration parameter is used to simulate the "psmqtt-publish.py" script variant that was
  # provided in the past by psmqtt project; if exit_after_num_tasks=N, psmqtt will gracefully exit after
  # publishing all data associated with N tasks, that are executed according to usual scheduling rules.
  # The special value ZERO indicates that psmqtt publish tasks indefinitively, until stopped via SIGTERM.
  exit_after_num_tasks: 0

schedule:
  # Each scheduling rule is defined by a cron expression and a list of tasks to be executed;
  # the "cron" expression is a human-friendly expression, see https://github.com/kvh/recurrent/tree/master
  # for example of supported syntaxes
  - cron: "every 10 seconds"
    tasks:
      # Each task is defined by
      # * "task": the name (see PSMQTT docs for full list of available task handlers);
      # * "params": optional task parameters (e.g. percentage or absolute value, the name of an hard drive or the index of a CPU, etc);
      # * "topic": optional MQTT topic name; if this is not provided, the task name and all its parameters will be used as MQTT topic;
      # * "formatter": optional formatter expression, which is a Jinja2 expression
      # see "Usage docs" for more details

      # Simple task requesting to publish virtual_memory percentage into a topic named "foobar"
      - task: virtual_memory
        params: [ percent ]
        topic: foobar

      # Task with 2 parameters, no formatter, no HomeAssistant discovery message configuration:
      - task: sensors_temperatures
        params: [ coretemp, 0 ] # use "coretemp" sensor for CPU core 0
        
      # Task with 1 parameter, no formatter, HomeAssistant discovery message configuration:
      - task: cpu_percent
        params: [ total ]
        ha_discovery:
          name: "CPU Percentage"
          platform: sensor
          unit_of_measurement: "%"
          icon: mdi:speedometer

      # Task with 1 parameter, no formatter, HomeAssistant discovery message configuration:
      - task: virtual_memory
        params: [ percent ]
        ha_discovery:
          name: "Memory Percentage"
          platform: sensor
          unit_of_measurement: "%"
          icon: mdi:memory
  
  # Another scheduling rule:
  - cron: "every 15 seconds"
    tasks:

      # Example task having 2 parameters that select 1 specific output out of the many that the "disk_io_counters"
      # psutil function normally produces; this task is thus single-valued and an HomeAssistant MQTT discovery 
      # message is configured to ease the integration with HomeAssistant.
      # Moreover this task has also a formatter attached that will convert the output value from Bytes/s to MB/s,
      # as a floating point number with 2 decimal digits.
      - task: disk_io_counters_rate
        params: [ "read_bytes", "/dev/sda" ]
        formatter: "{{x|MB_fractional(2)}}"
        ha_discovery:
          name: "SDA Read Bytes"
          platform: sensor
          device_class: data_rate
          unit_of_measurement: "MB/s"
      - task: disk_io_counters_rate
        params: [ "write_bytes", "/dev/sda" ]
        formatter: "{{x|MB_fractional(2)}}"
        ha_discovery:
          name: "SDA Write Bytes"
          platform: sensor
          device_class: data_rate
          unit_of_measurement: "MB/s"

      # Task showcasing the use of the "net_io_counters_rate" task handler
      - task: net_io_counters_rate
        params: [ "bytes_sent", "enp3s0" ]
        formatter: "{{x|MB_fractional(2)}}"
        ha_discovery:
          name: "enp3s0 TX Bytes"
          platform: sensor
          device_class: data_rate
          unit_of_measurement: "MB/s"
      - task: net_io_counters_rate
        params: [ "bytes_recv", "enp3s0" ]
        formatter: "{{x|MB_fractional(2)}}"
        ha_discovery:
          name: "enp3s0 RX Bytes"
          platform: sensor
          device_class: data_rate
          unit_of_measurement: "MB/s"
  
      # A few tasks showcasing the use of the "smart" task handler:
      - task: smart
        params: [ "/dev/nvme0", temperature ] # report only the "temperature" SMART attribute of "/dev/nvme0"
        ha_discovery:
          name: "NVMe0 Temperature"
          platform: sensor
          device_class: temperature
          unit_of_measurement: "Â°C"
          icon: mdi:thermometer

      # Task requesting ALL available SMART attributes of a specific disk to be published as individual topics
      - task: smart
        params: [ "/dev/sda", "*" ]
        topic: "/sda_smart_status/*"
        # ha_discovery not supported for messages with wildcards 

      # Task requesting ALL available SMART attributes of a specific disk to be published as a single topic with JSON payload
      - task: smart
        params: [ "/dev/sda", "+" ]
        topic: "/sda_smart_status"
        # ha_discovery not supported for messages with wildcards 

      # Task requesting to publish the result of the last SMART test, complete with HomeAssistant discovery message configuration:
      - task: smart
        params: [ "/dev/sda", "test[0]" ]
        formatter: "{{hours}}"
        topic: "sda_info_last_test"
        ha_discovery:
          name: "SDA SMART Test"
          platform: sensor
          device_class: duration
          unit_of_measurement: "h"
          icon: mdi:clock

      # Task requesting to publish the overall SMART status, complete with HomeAssistant discovery message configuration:
      - task: smart
        params: [ "/dev/sda", smart_status ]
        ha_discovery:
          name: "SDA SMART Status"
          platform: binary_sensor
          payload_on: FAIL  # the "on" condition indicates a problem, so associate it with the "FAIL" status of SMART test
          payload_off: PASS
          device_class: problem
          icon: mdi:harddisk

  - cron: "every 1 minutes"
    tasks:
      - task: getloadavg
        params: [ "last5min", "percent" ]
        formatter: "{{'%0.2f'|format(x)}}"
        ha_discovery:
          name: "Average System Load"
          platform: sensor
          unit_of_measurement: "%"
          icon: mdi:speedometer

  - cron: "every 60 minutes"
    tasks:
      - task: disk_usage
        params: [ percent, "/" ]
        ha_discovery:
          name: "Root Disk Usage"
          platform: sensor
          unit_of_measurement: "%"
          icon: mdi:harddisk

  - cron: "every 3 hours"
    tasks:
      # Task with a Jinja2 formatter; single or double-quoting is necessary
      - task: boot_time
        formatter: "{{x|iso8601_str}}"
        ha_discovery:
          name: "Uptime"
          platform: sensor
          device_class: timestamp
          icon: mdi:calendar
          value_template: "{{ as_datetime(value) }}"